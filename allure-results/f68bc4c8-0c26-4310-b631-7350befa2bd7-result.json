{"name": "test_add_products_and_checkout", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.TimeoutException: Message:", "trace": "self = <tests.test_checkout.TestCheckout object at 0x00000273785AAAD0>\n\n    def test_add_products_and_checkout(self):\n        # Load config\n        with open(\"testsetting.json\") as f:\n            config = json.load(f)\n    \n        self.driver.get(config[\"base_url\"])\n    \n        # Login\n        login = LoginPage(self.driver)\n        login.login(config[\"username\"], config[\"password\"])\n    \n        # Add 3 items to cart\n        inventory = InventoryPage(self.driver)\n        inventory.add_products_to_cart(3)\n        inventory.go_to_cart()\n    \n        # Go to checkout\n        cart = CartPage(self.driver)\n        cart.click_checkout()\n    \n        WebDriverWait(self.driver, 10).until(\n            EC.url_contains(\"checkout-step-one\")\n        )\n        print(\"URL sau khi click checkout:\", self.driver.current_url)\n    \n        # Fill info\n        checkout = CheckoutPage(self.driver)\n        checkout.fill_checkout_info(\"John\", \"Doe\", \"70000\")\n    \n        self.driver.save_screenshot(\"before_finish.png\")\n        print(\"URL trước khi finish:\", self.driver.current_url)\n    \n        # Finish\n>       checkout.finish_order()\n\ntests\\test_checkout.py:47: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\npages\\checkout_page.py:28: in finish_order\n    WebDriverWait(self.driver, 10).until(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.support.wait.WebDriverWait (session=\"3adee8892eaf89a798e4851599aefffc\")>, method = <function url_contains.<locals>._predicate at 0x0000027378641080>, message = ''\n\n    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = \"\") -> T:\n        \"\"\"Wait until the method returns a value that is not False.\n    \n        Calls the method provided with the driver as an argument until the\n        return value does not evaluate to ``False``.\n    \n        Parameters:\n        -----------\n        method: callable(WebDriver)\n            - A callable object that takes a WebDriver instance as an argument.\n    \n        message: str\n            - Optional message for :exc:`TimeoutException`\n    \n        Return:\n        -------\n        object: T\n            - The result of the last call to `method`\n    \n        Raises:\n        -------\n        TimeoutException\n            - If 'method' does not return a truthy value within the WebDriverWait\n            object's timeout\n    \n        Example:\n        --------\n        >>> from selenium.webdriver.common.by import By\n        >>> from selenium.webdriver.support.ui import WebDriverWait\n        >>> from selenium.webdriver.support import expected_conditions as EC\n    \n        # Wait until an element is visible on the page\n        >>> wait = WebDriverWait(driver, 10)\n        >>> element = wait.until(EC.visibility_of_element_located((By.ID, \"exampleId\")))\n        >>> print(element.text)\n        \"\"\"\n        screen = None\n        stacktrace = None\n    \n        end_time = time.monotonic() + self._timeout\n        while True:\n            try:\n                value = method(self._driver)\n                if value:\n                    return value\n            except self._ignored_exceptions as exc:\n                screen = getattr(exc, \"screen\", None)\n                stacktrace = getattr(exc, \"stacktrace\", None)\n            if time.monotonic() > end_time:\n                break\n            time.sleep(self._poll)\n>       raise TimeoutException(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message:\n\n..\\..\\..\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\selenium\\webdriver\\support\\wait.py:138: TimeoutException"}, "attachments": [{"name": "stdout", "source": "eacd72bf-3058-47e8-80a9-2cce2472afca-attachment.txt", "type": "text/plain"}], "start": 1753612445047, "stop": 1753612456406, "uuid": "9e23443a-60cb-438e-ac4e-d7d6d9818f93", "historyId": "fc3ac0b1ae094a15ae71934c17642b25", "testCaseId": "fc3ac0b1ae094a15ae71934c17642b25", "fullName": "tests.test_checkout.TestCheckout#test_add_products_and_checkout", "labels": [{"name": "parentSuite", "value": "tests"}, {"name": "suite", "value": "test_checkout"}, {"name": "subSuite", "value": "TestCheckout"}, {"name": "host", "value": "AnhHuy"}, {"name": "thread", "value": "3040-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.test_checkout"}]}